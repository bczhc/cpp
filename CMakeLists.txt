find_file(CLANG_PATH NAMES clang)
find_file(CLANG++_PATH NAMES clang++)
if (EXISTS "${CLANG_PATH}")
    set(C_COMPILER "${CLANG_PATH}")
else ()
    find_file(GCC_PATH NAMES gcc)
    set(C_COMPILER "${GCC_PATH}")
endif ()
if (EXISTS "${CLANG++_PATH}")
    set(CXX_COMPILER "${CLANG++_PATH}")
else ()
    find_file(GCC++_PATH NAMES g++)
    set(CXX_COMPILER "${GCC++_PATH}")
endif ()
set(CMAKE_C_COMPILER "${C_COMPILER}")
set(CMAKE_CXX_COMPILER "${CXX_COMPILER}")
set(CMAKE_C_FLAGS "-std=c99 -g")
set(CMAKE_CXX_FLAGS "-std=c++17 -g")

project(cpp)

#sqlite3 library
find_library(SQLITE3_LIBRARY NAMES sqlite3)
message(STATUS ${SQLITE3_FOUND})
if (NOT EXISTS "${SQLITE3_LIBRARY}")
    add_library(sqlite3 SHARED third_party/sqlite3-single-c/sqlite3.c)
endif ()

find_path(SQLITE3_INCLUDE_DIR NAMES sqlite3.h)
if (EXISTS "${SQLITE3_INCLUDE_DIR}")
    include_directories("${SQLITE3_INCLUDE_DIR}")
else ()
    include_directories(third_party/sqlite3-single-c)
endif ()

#pthread library
find_library(PTHREAD_LIB NAMES pthread REQUIRED)
find_path(PTHREAD_INCLUDE_DIR pthread.h)
include_directories("${PTHREAD_INCLUDE_DIR}")

add_library(zhcLib SHARED ComplexIntegral.cpp ComplexValue.cpp Epicycle.cpp FourierSeries.cpp utf8.cpp CountCharacters.cpp Concurrent.cpp Sqlite3.cpp zhc.cpp io.cpp String.cpp reverseCharacters.cpp)
target_link_libraries(zhcLib "${SQLITE3_LIBRARY}" "${PTHREAD_LIB}")

link_libraries(zhcLib)

add_executable(T1 test/T1.cpp zhc.cpp)
add_executable(T2 test/T2.cpp zhc.cpp)
add_executable(T3 test/T3.cpp zhc.cpp)
add_executable(T4 test/T4.cpp zhc.cpp)
add_executable(diaryCharactersStatistics test/DiaryCharactersStatistics.cpp)
add_executable(printUnicodeCharacters test/printUnicodeCharacters.cpp)
add_executable(test test/test.cpp)
add_executable(fourierSeriesTest test/fourierSeriesTest.cpp)
add_executable(sqlite3ToJSON test/sqlite3ToJSON.cpp)
add_executable(snake snake.cpp zhc.cpp)
add_executable(snake2 snake2.cpp zhc.cpp)
add_executable(sqliteTest test/sqliteTest.cpp)
add_executable(charactersStatistics CharactersStatistics.cpp)
add_executable(thread test/thread.cpp)
add_executable(producerAndConsumer test/producerAndConsumer.cpp)
add_executable(reverse test/reverse.cpp)
add_executable(echoAndWrite test/echoAndWrite.cpp)
